q()
‹
Ÿ,cÙRÈ ©/[He©±	Ÿ%Åˆ,Q††²’Ý$Æ’å×eúÍÕ÷ÿ×®kÞóžç¹Ï}Îó¼ç9ó¾'´-á K
L = c(1,2,0,1,2,0,0,0,0,2,0,0,0,1,0,1,0,2,0,2,0,2,0,0,0,0, 0, 1, 0, 2,2, 1, 0, 0, 0, 2, 0, 2, 0, 1,2, 0, 1, 2, 2, 0, 0, 1, 0, 0,0, 1, 0, 3, 2, 1, 2, 0, 0, 0,1, 0, 2, 0, 1, 1, 0, 3, 1, 1,0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 0, 1, 2, 0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0,0, 0, 1, 0, 0, 2, 2, 0, 2, 0)
L = matrix(L,nrow=12,byrow=TRUE);
L
x = c(0, 1, 2, 2, 1, 0, 0, 0, 1, 1);
x = c(2);
2
1
0
1
0
0
0
1
x = c(2,2,1,0,1,0,0,0,1,1);
L_F = colSums(L[1:4,])+1;
Lf_sum = sum(L_F)+10;
PF = log10(100*L_F/Lf_sum);
AF=sum(PF*x)+log10(100/3);
L_F
L
lf_sum
Lf_sum
Lf_sum = sum(L_F);
PF = log10(100*L_F/Lf_sum);
AF=sum(PF*x)+log10(100/3);
PF
AF
L_E = colSums(L[5:8,])+1;
Le_sum = sum(L_E);
PE = log10(100*L_E/Le_sum);
AE=sum(PE*x)+log10(100/3);
L_H = colSums(L[9:12,])+1;
Lh_sum = sum(L_H);
PH = log10(100*L_H/Lh_sum);
AH=sum(PH*x)+log10(100/3);
AE
AH
x2 = c(0,1,0,1);
L2 = c(c(1,0,2,0),c(2,1,1,1),c(0,1,0,1),c(1,2,1,2),c(0,2,1,1),c(1,1,0,2));
L2 = matrix(L2,nrow=6,byrow=TRUE);
L2_F = colSums(L2[1:2,])+1;
Lf2_sum = sum(L2_F);
PF2 = log10(100*L2_F/Lf2_sum);
AF2=sum(PF2*x2)+log10(100/3);
L2_E = colSums(L2[3:6,])+1;
Le2_sum = sum(L2_E);
PE2 = log10(100*L2_E/Le2_sum);
AE2=sum(PE2*x2)+log10(100/3);
AF2
AE2
 PF2
PE2
100*L2_F/Lf2_sum
L2_F/Lf2_sum
L2_E/Le2_sum
q()
load("C:\\Users\\Runxin\\Dropbox\\Courses\\R\\code\\week3\\.RData")
x <- c(1,2,3,4,5)
source('makeVector.R')
source('cachemean.R')
y <- makeVector(x)
y$get()
cachemean(y)
cachemean(y)
source('makeCacheMatrix.R')
source('cachesolve.R.R')
source('cachesolve.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()    
cacheSolve(amatrix) 
source('cacheSolve.R')
cacheSolve(amatrix) 
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix) 
amatrix$get()     
amatrix$getinverse()
q()
